// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TopicMetadataRequest {
    #[prost(string, repeated, tag = "1")]
    pub topics: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TopicMetadataResponse {
    #[prost(message, repeated, tag = "1")]
    pub brokers: ::prost::alloc::vec::Vec<topic_metadata_response::Broker>,
    #[prost(message, repeated, tag = "2")]
    pub topics: ::prost::alloc::vec::Vec<topic_metadata_response::TopicMetadata>,
}
/// Nested message and enum types in `TopicMetadataResponse`.
pub mod topic_metadata_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Broker {
        #[prost(int32, tag = "1")]
        pub node_id: i32,
        #[prost(string, tag = "2")]
        pub host: ::prost::alloc::string::String,
        #[prost(int32, tag = "3")]
        pub port: i32,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicMetadata {
        #[prost(int32, tag = "1")]
        pub topic_error_code: i32,
        #[prost(string, tag = "2")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "3")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionMetadata>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PartitionMetadata {
        #[prost(int32, tag = "1")]
        pub partition_error_code: i32,
        #[prost(int32, tag = "2")]
        pub partition_id: i32,
        #[prost(int32, tag = "3")]
        pub leader: i32,
        #[prost(int32, repeated, tag = "4")]
        pub replicas: ::prost::alloc::vec::Vec<i32>,
        /// In-Sync Replicas
        #[prost(int32, repeated, tag = "5")]
        pub isr: ::prost::alloc::vec::Vec<i32>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProduceRequest {
    /// -1=all, 0=none, 1=leader
    #[prost(int32, tag = "1")]
    pub required_acks: i32,
    #[prost(int32, tag = "2")]
    pub timeout_ms: i32,
    #[prost(message, repeated, tag = "3")]
    pub topics: ::prost::alloc::vec::Vec<produce_request::TopicData>,
}
/// Nested message and enum types in `ProduceRequest`.
pub mod produce_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicData {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionData>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PartitionData {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        /// Serialized message set
        #[prost(bytes = "vec", tag = "2")]
        pub message_set: ::prost::alloc::vec::Vec<u8>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProduceResponse {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<produce_response::TopicResult>,
}
/// Nested message and enum types in `ProduceResponse`.
pub mod produce_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicResult {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionResult>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PartitionResult {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        #[prost(int32, tag = "2")]
        pub error_code: i32,
        /// Offset của message đã được ghi
        #[prost(int64, tag = "3")]
        pub offset: i64,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchRequest {
    /// -1 cho consumer
    #[prost(int32, tag = "1")]
    pub replica_id: i32,
    /// Max time to wait (ms)
    #[prost(int32, tag = "2")]
    pub max_wait_time: i32,
    /// Min bytes để response
    #[prost(int32, tag = "3")]
    pub min_bytes: i32,
    #[prost(message, repeated, tag = "4")]
    pub topics: ::prost::alloc::vec::Vec<fetch_request::TopicData>,
}
/// Nested message and enum types in `FetchRequest`.
pub mod fetch_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicData {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionData>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PartitionData {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        #[prost(int64, tag = "2")]
        pub fetch_offset: i64,
        #[prost(int32, tag = "3")]
        pub max_bytes: i32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchResponse {
    #[prost(message, repeated, tag = "1")]
    pub topics: ::prost::alloc::vec::Vec<fetch_response::TopicResult>,
}
/// Nested message and enum types in `FetchResponse`.
pub mod fetch_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicResult {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionResult>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PartitionResult {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        #[prost(int32, tag = "2")]
        pub error_code: i32,
        #[prost(int64, tag = "3")]
        pub high_watermark_offset: i64,
        #[prost(int32, tag = "4")]
        pub message_set_size: i32,
        #[prost(bytes = "vec", tag = "5")]
        pub message_set: ::prost::alloc::vec::Vec<u8>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListOffsetsRequest {
    #[prost(int32, tag = "1")]
    pub replica_id: i32,
    #[prost(message, repeated, tag = "2")]
    pub topics: ::prost::alloc::vec::Vec<list_offsets_request::TopicData>,
}
/// Nested message and enum types in `ListOffsetsRequest`.
pub mod list_offsets_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicData {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionData>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PartitionData {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        /// -1=latest, -2=earliest
        #[prost(int64, tag = "2")]
        pub time: i64,
        #[prost(int32, tag = "3")]
        pub max_number_of_offsets: i32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListOffsetsResponse {
    #[prost(message, repeated, tag = "1")]
    pub topics: ::prost::alloc::vec::Vec<list_offsets_response::TopicResult>,
}
/// Nested message and enum types in `ListOffsetsResponse`.
pub mod list_offsets_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicResult {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionOffsets>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PartitionOffsets {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        #[prost(int32, tag = "2")]
        pub error_code: i32,
        #[prost(int64, repeated, tag = "3")]
        pub offsets: ::prost::alloc::vec::Vec<i64>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupCoordinatorRequest {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupCoordinatorResponse {
    #[prost(int32, tag = "1")]
    pub error_code: i32,
    #[prost(int32, tag = "2")]
    pub coordinator_id: i32,
    #[prost(string, tag = "3")]
    pub coordinator_host: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub coordinator_port: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinGroupRequest {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub session_timeout: i32,
    #[prost(string, tag = "3")]
    pub member_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub protocol_type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub group_protocols: ::prost::alloc::vec::Vec<join_group_request::GroupProtocol>,
}
/// Nested message and enum types in `JoinGroupRequest`.
pub mod join_group_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GroupProtocol {
        #[prost(string, tag = "1")]
        pub protocol_name: ::prost::alloc::string::String,
        #[prost(bytes = "vec", tag = "2")]
        pub protocol_metadata: ::prost::alloc::vec::Vec<u8>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinGroupResponse {
    #[prost(int32, tag = "1")]
    pub error_code: i32,
    #[prost(int32, tag = "2")]
    pub generation_id: i32,
    #[prost(string, tag = "3")]
    pub group_protocol: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub leader_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub member_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub members: ::prost::alloc::vec::Vec<join_group_response::Member>,
}
/// Nested message and enum types in `JoinGroupResponse`.
pub mod join_group_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Member {
        #[prost(string, tag = "1")]
        pub member_id: ::prost::alloc::string::String,
        #[prost(bytes = "vec", tag = "2")]
        pub member_metadata: ::prost::alloc::vec::Vec<u8>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncGroupRequest {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub generation_id: i32,
    #[prost(string, tag = "3")]
    pub member_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub group_assignment: ::prost::alloc::vec::Vec<sync_group_request::Assignment>,
}
/// Nested message and enum types in `SyncGroupRequest`.
pub mod sync_group_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Assignment {
        #[prost(string, tag = "1")]
        pub member_id: ::prost::alloc::string::String,
        #[prost(bytes = "vec", tag = "2")]
        pub member_assignment: ::prost::alloc::vec::Vec<u8>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncGroupResponse {
    #[prost(int32, tag = "1")]
    pub error_code: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub member_assignment: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub generation_id: i32,
    #[prost(string, tag = "3")]
    pub member_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    /// 0=NoError, non-zero to signal rejoin
    #[prost(int32, tag = "1")]
    pub error_code: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaveGroupRequest {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub member_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveGroupResponse {
    #[prost(int32, tag = "1")]
    pub error_code: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OffsetCommitRequest {
    #[prost(string, tag = "1")]
    pub consumer_group_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub topics: ::prost::alloc::vec::Vec<offset_commit_request::TopicData>,
}
/// Nested message and enum types in `OffsetCommitRequest`.
pub mod offset_commit_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicData {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionData>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PartitionData {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        #[prost(int64, tag = "2")]
        pub offset: i64,
        #[prost(string, tag = "3")]
        pub metadata: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OffsetCommitResponse {
    #[prost(message, repeated, tag = "1")]
    pub topics: ::prost::alloc::vec::Vec<offset_commit_response::TopicResult>,
}
/// Nested message and enum types in `OffsetCommitResponse`.
pub mod offset_commit_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicResult {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionResult>,
    }
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct PartitionResult {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        #[prost(int32, tag = "2")]
        pub error_code: i32,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OffsetFetchRequest {
    #[prost(string, tag = "1")]
    pub consumer_group: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub topics: ::prost::alloc::vec::Vec<offset_fetch_request::TopicData>,
}
/// Nested message and enum types in `OffsetFetchRequest`.
pub mod offset_fetch_request {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicData {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(int32, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<i32>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OffsetFetchResponse {
    #[prost(message, repeated, tag = "1")]
    pub topics: ::prost::alloc::vec::Vec<offset_fetch_response::TopicResult>,
}
/// Nested message and enum types in `OffsetFetchResponse`.
pub mod offset_fetch_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TopicResult {
        #[prost(string, tag = "1")]
        pub topic_name: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "2")]
        pub partitions: ::prost::alloc::vec::Vec<PartitionResult>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PartitionResult {
        #[prost(int32, tag = "1")]
        pub partition: i32,
        #[prost(int64, tag = "2")]
        pub offset: i64,
        #[prost(string, tag = "3")]
        pub metadata: ::prost::alloc::string::String,
        #[prost(int32, tag = "4")]
        pub error_code: i32,
    }
}
/// Generated client implementations.
pub mod kafka_broker_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Kafka Broker Service
    #[derive(Debug, Clone)]
    pub struct KafkaBrokerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl KafkaBrokerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> KafkaBrokerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> KafkaBrokerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            KafkaBrokerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Topic Management
        pub async fn get_topic_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::TopicMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TopicMetadataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/GetTopicMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.KafkaBroker", "GetTopicMetadata"));
            self.inner.unary(req, path, codec).await
        }
        /// Producer Operations
        pub async fn produce(
            &mut self,
            request: impl tonic::IntoRequest<super::ProduceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ProduceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/api.KafkaBroker/Produce");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("api.KafkaBroker", "Produce"));
            self.inner.unary(req, path, codec).await
        }
        /// Consumer Operations
        pub async fn fetch(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/api.KafkaBroker/Fetch");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("api.KafkaBroker", "Fetch"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_offsets(
            &mut self,
            request: impl tonic::IntoRequest<super::ListOffsetsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListOffsetsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/ListOffsets",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.KafkaBroker", "ListOffsets"));
            self.inner.unary(req, path, codec).await
        }
        /// Consumer Group Coordination
        pub async fn find_coordinator(
            &mut self,
            request: impl tonic::IntoRequest<super::GroupCoordinatorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupCoordinatorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/FindCoordinator",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.KafkaBroker", "FindCoordinator"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn join_group(
            &mut self,
            request: impl tonic::IntoRequest<super::JoinGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::JoinGroupResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/JoinGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("api.KafkaBroker", "JoinGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sync_group(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SyncGroupResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/SyncGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("api.KafkaBroker", "SyncGroup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/Heartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("api.KafkaBroker", "Heartbeat"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn leave_group(
            &mut self,
            request: impl tonic::IntoRequest<super::LeaveGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LeaveGroupResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/LeaveGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.KafkaBroker", "LeaveGroup"));
            self.inner.unary(req, path, codec).await
        }
        /// Offset Management
        pub async fn commit_offset(
            &mut self,
            request: impl tonic::IntoRequest<super::OffsetCommitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OffsetCommitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/CommitOffset",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.KafkaBroker", "CommitOffset"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn fetch_offset(
            &mut self,
            request: impl tonic::IntoRequest<super::OffsetFetchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OffsetFetchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/api.KafkaBroker/FetchOffset",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("api.KafkaBroker", "FetchOffset"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod kafka_broker_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with KafkaBrokerServer.
    #[async_trait]
    pub trait KafkaBroker: std::marker::Send + std::marker::Sync + 'static {
        /// Topic Management
        async fn get_topic_metadata(
            &self,
            request: tonic::Request<super::TopicMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TopicMetadataResponse>,
            tonic::Status,
        >;
        /// Producer Operations
        async fn produce(
            &self,
            request: tonic::Request<super::ProduceRequest>,
        ) -> std::result::Result<tonic::Response<super::ProduceResponse>, tonic::Status>;
        /// Consumer Operations
        async fn fetch(
            &self,
            request: tonic::Request<super::FetchRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchResponse>, tonic::Status>;
        async fn list_offsets(
            &self,
            request: tonic::Request<super::ListOffsetsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListOffsetsResponse>,
            tonic::Status,
        >;
        /// Consumer Group Coordination
        async fn find_coordinator(
            &self,
            request: tonic::Request<super::GroupCoordinatorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GroupCoordinatorResponse>,
            tonic::Status,
        >;
        async fn join_group(
            &self,
            request: tonic::Request<super::JoinGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::JoinGroupResponse>,
            tonic::Status,
        >;
        async fn sync_group(
            &self,
            request: tonic::Request<super::SyncGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SyncGroupResponse>,
            tonic::Status,
        >;
        async fn heartbeat(
            &self,
            request: tonic::Request<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
        async fn leave_group(
            &self,
            request: tonic::Request<super::LeaveGroupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LeaveGroupResponse>,
            tonic::Status,
        >;
        /// Offset Management
        async fn commit_offset(
            &self,
            request: tonic::Request<super::OffsetCommitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OffsetCommitResponse>,
            tonic::Status,
        >;
        async fn fetch_offset(
            &self,
            request: tonic::Request<super::OffsetFetchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OffsetFetchResponse>,
            tonic::Status,
        >;
    }
    /// Kafka Broker Service
    #[derive(Debug)]
    pub struct KafkaBrokerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> KafkaBrokerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for KafkaBrokerServer<T>
    where
        T: KafkaBroker,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/api.KafkaBroker/GetTopicMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct GetTopicMetadataSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::TopicMetadataRequest>
                    for GetTopicMetadataSvc<T> {
                        type Response = super::TopicMetadataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TopicMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::get_topic_metadata(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTopicMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/Produce" => {
                    #[allow(non_camel_case_types)]
                    struct ProduceSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::ProduceRequest>
                    for ProduceSvc<T> {
                        type Response = super::ProduceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ProduceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::produce(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ProduceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/Fetch" => {
                    #[allow(non_camel_case_types)]
                    struct FetchSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<T: KafkaBroker> tonic::server::UnaryService<super::FetchRequest>
                    for FetchSvc<T> {
                        type Response = super::FetchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::fetch(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/ListOffsets" => {
                    #[allow(non_camel_case_types)]
                    struct ListOffsetsSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::ListOffsetsRequest>
                    for ListOffsetsSvc<T> {
                        type Response = super::ListOffsetsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListOffsetsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::list_offsets(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListOffsetsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/FindCoordinator" => {
                    #[allow(non_camel_case_types)]
                    struct FindCoordinatorSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::GroupCoordinatorRequest>
                    for FindCoordinatorSvc<T> {
                        type Response = super::GroupCoordinatorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GroupCoordinatorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::find_coordinator(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindCoordinatorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/JoinGroup" => {
                    #[allow(non_camel_case_types)]
                    struct JoinGroupSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::JoinGroupRequest>
                    for JoinGroupSvc<T> {
                        type Response = super::JoinGroupResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::JoinGroupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::join_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = JoinGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/SyncGroup" => {
                    #[allow(non_camel_case_types)]
                    struct SyncGroupSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::SyncGroupRequest>
                    for SyncGroupSvc<T> {
                        type Response = super::SyncGroupResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SyncGroupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::sync_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SyncGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/Heartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct HeartbeatSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::HeartbeatRequest>
                    for HeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HeartbeatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::heartbeat(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HeartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/LeaveGroup" => {
                    #[allow(non_camel_case_types)]
                    struct LeaveGroupSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::LeaveGroupRequest>
                    for LeaveGroupSvc<T> {
                        type Response = super::LeaveGroupResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LeaveGroupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::leave_group(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LeaveGroupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/CommitOffset" => {
                    #[allow(non_camel_case_types)]
                    struct CommitOffsetSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::OffsetCommitRequest>
                    for CommitOffsetSvc<T> {
                        type Response = super::OffsetCommitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OffsetCommitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::commit_offset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommitOffsetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/api.KafkaBroker/FetchOffset" => {
                    #[allow(non_camel_case_types)]
                    struct FetchOffsetSvc<T: KafkaBroker>(pub Arc<T>);
                    impl<
                        T: KafkaBroker,
                    > tonic::server::UnaryService<super::OffsetFetchRequest>
                    for FetchOffsetSvc<T> {
                        type Response = super::OffsetFetchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OffsetFetchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as KafkaBroker>::fetch_offset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchOffsetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for KafkaBrokerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "api.KafkaBroker";
    impl<T> tonic::server::NamedService for KafkaBrokerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
